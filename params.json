{
  "name": "Dewcontrols",
  "tagline": "A simple collection of controls and utility for UWP applications",
  "body": "# DEW CONTROLS\r\n\r\n## About the controls\r\nThis is a set of controls (hope to expand it soon) for __UWP__ platform.  \r\nI develop primarly on phone, desktop and tablet. Sincerely I don't know how these controls will approach on devices like __HoloLens__ or xbox-one.  \r\nHowever, I will update the repository if I find news about this.\r\n\r\n>For more information you can check the __inline__ documentation\r\n\r\n## Helpers\r\nIn the namespace DewCommonLibrary you can find some helper and some converter.\r\nConverters:\r\n- BoolToVisibilityConverter\r\n- VisibilityToBoolConverter\r\n- DebugConverter\r\n- ColorToNullableColor\r\n- NullToVisibilityConverter\r\n\r\nHelpers:\r\n- AppSettings - An easy way to use localsettings\r\n\r\n## Controls list\r\n- Hamburger drawer\r\n- Dialog Window\r\n- Toast alerts\r\n- Toast loader\r\n- Float Button\r\n\r\n### Work in progress\r\n- Waffle menu\r\n\r\n## Microsoft Community Toolkit\r\nIn this version I've removed AppStudio and I started to use Microsoft Community Toolkit.\r\n\r\n## Hamburger\r\nThe Hamburger is __highly customizable__. You can check the customizable properties here.\r\n\r\n### Properties\r\n- HamburgerType: __enum__  \r\nvalues:  LeftSide, LeftSideCompact, LeftSideCompactInLine, LeftSideInLine, RightSide, RightSideCompact, RightSideCompactInLine, RightSideInLine \r\n- HamburgerButtonAnimation: __enum__  \r\nvalues:  No, ToArrow, ToVertical\r\n- IsPaneOpeend: __bool__ - Get or set the value of panel (and open and close it)\r\n- IsSwipeOpenEnabled: __bool__ - Get or set the value of \"open with swipe\" feature\r\n- IsHamburgerButtonAnimationEnabled: __bool__ - Get or set the value for the \"hamburger button animation feature\"\r\n- BarBackgroundColor: __Brush__ - The top bar background\r\n- BarContent: __UIElement__ - The content of the top bar\r\n- HamburgerForeground: __Brush__ - The hamburger button foreground\r\n- HamburgerBackground: __Color__ - The hamburger button background color\r\n- HamburgerBackgroundPressed: __Color__ - The hamburger button background color when pressed\r\n- PaneBackground: __Brush__ - The panel background\r\n- PaneContent: __UIElement__ - The panel content\r\n- ContentBackground: __Brush__ - The main content background\r\n- OpenedPaneLength: __double__ - The size of opened panel\r\n- Content: __UIElement__ - The main content\r\n\r\n### Events\r\n- HamburgerTapped: __TappedEventHandler__ - Fired when hamburger button is tapped (not with swipe)\r\n- PaneClosed: __TypedEventHandler<SplitView,Object>__ - Fired when panel is closed\r\n- PaneClosing: __TypedEventHandler<SplitView,Object>__ - Fired when panel is closing\r\n\r\n### Methods\r\nThere aren't public methods\r\n\r\n### Example\r\n```xaml\r\n<dc:DewHamburgerMenu x:Name=\"MainMenu\"  \r\n    BarBackgroundColor=\"Transparent\"   \r\n    ContentBackground=\"Transparent\"   \r\n    PaneBackground=\"Transparent\"   \r\n    HamburgerType=\"LeftSideCompact\">    \r\n    <dc:DewHamburgerMenu.PaneContent>  \r\n            <!-- pane stuff -->  \r\n    </dc:DewHamburgerMenu.PaneContent>  \r\n    <dc:DewHamburgerMenu.BarContent>  \r\n            <TextBlock Text=\"\" x:Name=\"HamburgerTitle\" FontSize=\"28\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" Foreground=\"WhiteSmoke\" Margin=\"0,0,30,0\"/>  \r\n    </dc:DewHamburgerMenu.BarContent>  \r\n    <dc:DewHamburgerMenu.Content>  \r\n        <Grid>  \r\n            <Frame x:Name=\"PageFrame\"  /> \r\n        </Grid>  \r\n    </dc:DewHamburgerMenu.Content>  \r\n</dc:DewHamburgerMenu>\r\n```\r\n### Some screens\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160809_0002.png\" width=\"200\"/>\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160809_0001.png\" width=\"200\"/>\r\n\r\n\r\n## Toast popup\r\nThe toast popup is really cute and you can use it to give a feedback to the user about an operation, or obviously, whatever you want.\r\n\r\n### Properties\r\n- MessageFontFamily: __FontFamily__ - The font family for text in the toast  \r\n- MessageFontSize: __double__ - The font size in the toast\r\n- CornerRadius: __CornerRadius__ - The toast corners\r\n- Background: __Brush__ - Toast background\r\n- MessageForeground: __Brush__ - Toast text foreground\r\n- Message: __string__ - The popup text\r\n- IsVisible: __bool__ - Set or get the visibility property\r\n\r\n### Events\r\nThere aren't Events\r\n\r\n### Methods\r\n- ShowPopupMessageAsync(__string__:The toast message ,__int__:Time to popup hide (in ms, 0 = infinite),__int__: Animation time (in ms)): __Task__ (awaitable)\r\n- HidePopupMessageAsync(__int__: Animation time (in ms)): __Task__ (awaitable)\r\n\r\n### Example\r\nIn view xaml (note: the z-index is your discrection)\r\n```xaml\r\n <dc:DewToastPopup Margin=\"50\" Background=\"WhiteSmoke\" MessageFontSize=\"15\" VerticalAlignment=\"Bottom\" HorizontalAlignment=\"Center\" x:Name=\"Popup\" \r\n                          MessageForeground=\"Black\"/>\r\n```\r\nIn code behind\r\n```c#\r\nawait Popup.ShowPopupMessageAsync(\"example\", 2000);\r\n```\r\n### Some screens\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160809_0003.png\" width=\"200\"/>\r\n\r\n\r\n## Loader toast\r\nThis is a simple toast that contains a text and a loader ring. It's a simple way to show a loader with a message.\r\n\r\n### Properties\r\n- RingPosition: __enum__  \r\nvalues:Top, Bottom  \r\n- MessageFontFamily: __FontFamily__ - The font family for text in the toast  \r\n- MessageFontSize: __double__ - The font size in the toast\r\n- CornerRadius: __CornerRadius__ - The toast corners\r\n- MessageForeground: __Brush__ - Toast text foreground\r\n- Message: __string__ - The popup text\r\n- Background: __Brush__ - Toast background\r\n- IsRingEnabled: __bool__ - Set\\get the ring abilitation\r\n- IsRingActive: __bool__ - Set\\get the ring activation\r\n- IsVisible: __bool__ - Set or get the visibility property\r\n\r\n### Events\r\nThere aren't Events\r\n\r\n### Methods\r\n- ShowPopupLoaderAsync(__int__:the animation time): __Task__ (awaitable)\r\n- ShowPopupLoaderAsync(__string__:The message, __int__:the animation time): __Task__ (awaitable)\r\n- HidePopupLoaderAsync(__int__:the animation time): __Task__ (awaitable)\r\n\r\n### Example\r\nIn view xaml (note: the z-index is your discrection)\r\n```xaml\r\n <dc:DewLoader Margin=\"50\" Background=\"WhiteSmoke\" MessageFontSize=\"15\" VerticalAlignment=\"Bottom\" HorizontalAlignment=\"Center\" x:Name=\"Loader\" \r\n                          MessageForeground=\"Black\"/>\r\n```\r\nIn code behind\r\n```c#\r\nawait Loader.ShowPopupLoaderAsync(\"example\", 2000);\r\n```\r\n\r\n## Dialog Window\r\nHere we have a simple dialog control. You can customize it however you want.\r\nThe buttons must be defined in the buttons style properties.\r\n\r\n### Properties\r\n- DewDialogType: __enum__  \r\nvalues: OnlyTopBar (no buttons are showed), TopBarWithButtons (complete dialog window), TopBarAcceptButton (top bar with only right button), Nothing (only content)\r\n- DialogTitle: __string__ - Set\\get the top bar text\r\n- CloseGlyphForeground: __SolidColorBrush__ - The X button foreground\r\n- TopBarBackground: __Brush__ - The top bar background\r\n- TopBarForeground: __SolidColorBrush__ - The top bar foreground\r\n- ContentBackground: __Brush__ - The content background\r\n- Content: __UIElement__ - The content's content ( :| )\r\n- ButtonAreaBackground: __Brush__ - The button area background\r\n- LeftButtonStyle: __Style__ - Define the content and the button's style\r\n- RightButtonStyle: __Style__ - Define the content and the button's style\r\n- IsVisible: __bool__ - Set\\get the control's visibility\r\n- IsTopBarVisible: __bool__ - Set\\get the top bar visibility\r\n- IsButtonAreaVisibile: __bool__ - Set\\get the buttons bar visibility\r\n- IsLeftButtonVisible: __bool__ - Set\\get the left button visibility\r\n\r\n### Events\r\n- LeftButtonTapped: __TappedEventHandler(object: Content,TappedRoutedEventArgs)__\r\n- RightButtonTapped: __TappedEventHandler(object: Content ,TappedRoutedEventArgs)__\r\n- CloseButtonTapped: __TappedEventHandler(object: Content ,TappedRoutedEventArgs)__\r\n- DialogOpening: __OpenEventHandler(object: Content)__\r\n\r\n### Methods\r\n- ShowDialogAsync(__int__:the animation time): __Task__ (awaitable)\r\n- HideDialogAsync(__int__:the animation time): __Task__ (awaitable)\r\n\r\n### Example\r\nIn view xaml (note: the z-index is your discrection)\r\n```xaml\r\n <dc:DewDialog DialogType=\"TopBarWithButtons\" x:Name=\"Dialog\" ContentBackground=\"#cc000000\" TopBarBackground=\"Transparent\" \r\n                          ButtonAreaBackground=\"Transparent\" DialogOpening=\"Dialog_DialogOpening\"\r\n                      RightButtonTapped=\"Dialog_RightButtonTapped\"\r\n                          LeftButtonTapped=\"Dialog_LeftButtonTapped\"\r\n                      CloseGlyphForeground=\"White\" IsVisible=\"False\">\r\n              <!-- content stuff -->\r\n\r\n                <dc:DewDialog.RightButtonStyle>\r\n                    <Style TargetType=\"Button\" BasedOn=\"{StaticResource UWButtonLayer}\">\r\n                        <Setter Property=\"Content\">\r\n                            <Setter.Value>\r\n                                <TextBlock Text=\"\" x:Uid=\"CreateCollectionButton\"></TextBlock>\r\n                            </Setter.Value>\r\n                        </Setter>\r\n                    </Style>\r\n                </dc:DewDialog.RightButtonStyle>\r\n                <dc:DewDialog.LeftButtonStyle>\r\n                    <Style TargetType=\"Button\" BasedOn=\"{StaticResource UWButtonLayer}\">\r\n                        <Setter Property=\"Content\">\r\n                            <Setter.Value>\r\n                                <TextBlock Text=\"\" x:Uid=\"CancelButton\"></TextBlock>\r\n                            </Setter.Value>\r\n                        </Setter>\r\n                    </Style>\r\n                </dc:DewDialog.LeftButtonStyle>\r\n            </dc:DewDialog>\r\n```\r\nIn code behind\r\n```c#\r\nawait Loader.ShowDialogAsync(500);\r\n```\r\n\r\n### Some screens\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160809_0004.png\" width=\"200\"/>\r\n\r\n## Float Button\r\nThis control is similar to the button in Google Inbox App.\r\nIt's high customizable but also easy to use. I've used a mutual exclusion pattern to made this.\r\nYou have a default ListView in the DewFloatButton container for an immediate use, but you can also write in the DewFloatButton container whatever you want, let's see how.\r\n\r\n### Custom stuff\r\nThe DewFloatButton control has a content control that can show whathever you want through the property __FloatButtonListView__ (don't be confused by name, the property is an UIElement and can be whatever you want, I've just used this name because the default use of DewFloatButton is with a ListView).\r\nThis property is in mutual exclusion with __FlyoutItemsSource__ where, if __FlyoutItemsSource__ is null the __FloatButtonListView__ is showed.\r\n\r\nEs.\r\n```xaml\r\n<dc:DewFloatButton x:Name=\"FloatButton\" \r\n                           Margin=\"10,10,20,30\" VerticalAlignment=\"Bottom\" Tapped=\"FloatButton_Tapped\" \r\n                           DewFloatButtonBackground=\"#FF5AC350\" \r\n                           DewFloatButtonClosed=\"FloatButton_FloatButtonClosed\" \r\n                           DewFloatButtonOpened=\"FloatButton_FloatButtonOpened\"                            \r\n                           HorizontalAlignment=\"Right\"                            \r\n                           FlyoutWidth=\"250\"\r\n                           FlyoutMaxHeight=\"500\">\r\n            <dc:DewFloatButton.DewFloatButtonContent>\r\n                <FontIcon Glyph=\"&#xE109;\" Foreground=\"WhiteSmoke\" ></FontIcon>\r\n            </dc:DewFloatButton.DewFloatButtonContent>\r\n            <dc:DewFloatButton.DewFloatButtonListView>\r\n                <TextBlock>\r\n                    Mmm, I want just a text in here\r\n                </TextBlock>\r\n            </dc:DewFloatButton.DewFloatButtonListView>\r\n        </dc:DewFloatButton>\r\n```\r\nThere are also a lot of properties that work with the default ListView and, obviously if you set them are unuseful if you user your stuff in __FloatButtonListView__.\r\n\r\n### Work with default ListView\r\nIf you don't want spend much time working on a particular custom listview (or whatever you want) you can use the default ListView in __DewFloatButton__ control. You just need to bind the __FlyoutItemsSource__ to a collection of __DewFloatButtonItem__.\r\nA __DewFloatButtonItem__ is an class that contains two properties, an event and a method:\r\n- Icon: __UIElement__ - This field should be a graphic element like an icon, FontIcon, image, etc. Don't set it if you don't want show it.\r\n- Text: __string__ - The item text\r\n- OnSelected: __DewFloatButtonSelectedHandler(object, SelectionChangedEventArgs)__ - Selected item handler\r\n- Selected: _void(object, SelectionChangedEventArgs)__ - Invoke the handler if you need\r\n\r\nThe __DewFloatButton__ ListView will be automatically populated.\r\nThe default ListView works in differents ways. You can set those ways through the __DewFloatButton__ properties for items.\r\n\r\nEs.\r\n```xaml\r\n  <dc:DewFloatButton x:Name=\"FloatButton\" \r\n                           Margin=\"10,10,20,30\" VerticalAlignment=\"Bottom\" Tapped=\"FloatButton_Tapped\" \r\n                           DewFloatButtonBackground=\"#FF5AC350\" \r\n                           DewFloatButtonClosed=\"FloatButton_FloatButtonClosed\" \r\n                           DewFloatButtonOpened=\"FloatButton_FloatButtonOpened\" \r\n                           SelectedEvidence=\"Yes\" FlyoutItemsSource=\"{x:Bind ViewModel.DewItemsCollection, Mode=OneWay}\"\r\n                           CloseAfterSelect=\"Yes\"\r\n                           HorizontalAlignment=\"Right\" \r\n                           ItemTextFontSize=\"22\"\r\n                           FlyoutWidth=\"250\"\r\n                           FlyoutMaxHeight=\"500\"\r\n                           ItemHeight=\"60\"\r\n                           ItemTextForeground=\"White\"\r\n                           ItemTextBackground=\"Transparent\"\r\n                           IsAnimationActive=\"True\"\r\n                           ItemTextHorizontalAlignment=\"Right\"\r\n                           >\r\n            <dc:DewFloatButton.DewFloatButtonContent>\r\n                <FontIcon Glyph=\"&#xE109;\" Foreground=\"WhiteSmoke\" ></FontIcon>\r\n            </dc:DewFloatButton.DewFloatButtonContent>\r\n\r\n        </dc:DewFloatButton>\r\n```\r\n\r\n### Properties\r\n- CloseAfterSelectedEnum: __enum__  \r\nvalues: Yes, No\r\n- SelectedEvidenceEnum: __enum__  \r\nvalues: Yes, No\r\n- DewFloatbuttonListView: __UIElement__ - The container to show custom stuff\r\n- DewFloatButtonContent: __UIElement__ - The content of DewFloatButton button\r\n- DewFloatButtonBackground: __Brush__ - DewFloatButton button background\r\n- FlyoutMaxHeight: __double__ - The max height for DewFloatButton container\r\n- ItemTextFontSize: __double__ - The item text font size\r\n- ItemTextFontFamily: __FontFamily__ - The item text font family\r\n- ItemTextForeground: __Brush__ - The item text foreground\r\n- ItemTextBackground: __Brush__ - The item text background\r\n- ItemTextHorizontalAlignment: __HorizontalAlignment__ - The item text horizontal alignment\r\n- ItemBackground: __Brush__ - The full item background\r\n- FlyoutWidth: __double__ - The width of DewFloatButton container\r\n- ItemHeight: __double__ - The item height\r\n- FlyoutItemsSource: __ICollection\\<DewFloatButtonItem>__ - The itemsource for default ListView\r\n- ButtonStyle: __Style__ - A custom style for DewFloatButton\r\n- FlyoutStyle: __Style__ - A custom style for flyout element (DewFloatButton container)\r\n- IsAnimationActive: __bool__ - True if you want animation for DewFloatButton, false if not\r\n- IsOpened: __bool__ - Return the state of DewFloatButton container\r\n- SelectedEvidence: __SelectedEvidenceEnum__ - Indicates if an item selected should be highlighted\r\n- CloseAfterSelect: __CloseAfterSelectedEnum__ - Indicates if DewFloatButton container must be closed after than an element has been selected\r\n\r\n### Events\r\n- Tapped: __TappedEventHandler(object: Content,TappedRoutedEventArgs)__\r\n- DewFloatButtonClosed: __Action()__\r\n- DewFloatButtonOpened: __Action()__\r\n\r\n### Methods\r\n- CloseFlyout(): __void__\r\n\r\n### Example\r\nSee first section\r\n\r\n### Some screens\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160819_0003.png\" width=\"200\"/>\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160819_0005.png\" width=\"200\"/>\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160819_0004.png\" width=\"200\"/>\r\n\r\n## List Selector\r\n\r\nThis is a simple control that show a list of item where you can check them.\r\n\r\n### Properties\r\n\r\n- CheckBoxBorderForeground: __SolidColorBrush__ - The checkbox border foreground\r\n- ContainerBackground: __Bursh__ -  The container background\r\n- Items: __ICollection\\<DewListSelectorItem>__ - The list selector items\r\n- SeparatorForeground: __SolidColorBrush__ - The item SeparatorForeground\r\n- TextListForeground: __SolidColorBrush__ - The list items foreground\r\n- TextTitleForeground: __SolidColorBrush__ - The title foreground\r\n- TextTitle: __string__ - The title\r\n\r\n### Events\r\n- OnChecked: __TappedEventHandler__ - Fired after the item has changed value\r\n\r\n### Example\r\n```xaml\r\n<tk:DropShadowPanel ShadowOpacity=\"1\" BlurRadius=\"10\" HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" OffsetX=\"0\" OffsetY=\"0\">\r\n                    <dc:DewListSelector OnChecked=\"listsel_OnChecked\" Width=\"300\" Height=\"Auto\" HorizontalAlignment=\"Center\" TextListForeground=\"#FF303030\" ContainerBackground=\"WhiteSmoke\"\r\n                                        SeparatorForeground=\"#FFC5C5C5\"\r\n                                        VerticalAlignment=\"Center\" x:Name=\"listsel\" TitleText=\"New point of view\" TextTitleForeground=\"#FF0E0E0E\" CheckBoxBorderForeground=\"#FF323232\">\r\n                    </dc:DewListSelector>\r\n                </tk:DropShadowPanel>\r\n```\r\n### Some screens\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/11/wp_ss_20161113_0001.png\" width=\"200\"/>\r\n\r\n## Other sources\r\n\r\n### See in action\r\nYou can see some of those controls in the [Photove App](https://www.microsoft.com/en-gb/store/p/photove/9nblggh4tl9n)\r\n\r\n### Nuget\r\nYou can find controls on [nuget](https://www.nuget.org/packages/DewUserControls/)\r\n\r\n### Some docs\r\n[andrewdev](http://www.andrewdev.eu)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}