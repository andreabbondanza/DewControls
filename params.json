{
  "name": "Dewcontrols",
  "tagline": "A simple collection of controls and utility for UWP applications",
  "body": "#DEW CONTROLS\r\n\r\n##About the controls\r\nThis is a set of controls (hope to expand it soon) for __UWP__ platform.  \r\nI develop primarly on phone, desktop and tablet. Sincerely I don't know how these controls will approach on devices like __HoloLens__ or xbox-one.  \r\nHowever, I will update the repository if I find news about this.\r\n\r\n>For more information you can check the __inline__ documentation\r\n\r\n##Controls list\r\n- Hamburger drawer\r\n- Dialog Window\r\n- Toast alerts\r\n- Toast loader\r\n\r\n###Work in progress\r\n- Waffle menu\r\n- Floating button (like google inbox)\r\n\r\n##AppStudio\r\nBefore the appstudio release, I wrote a library for animations, etc. After AppStudio release, I've updated this library with it.\r\nNow the library contains helpers and other stuff like converters.\r\n\r\n##Hamburger\r\n\r\n###Properties\r\nThe Hamburger is __highly customizable__. You can check the customizable properties here.\r\n\r\n- HamburgerType:__enum__  \r\nvalues:  LeftSide, LeftSideCompact, LeftSideCompactInLine, LeftSideInLine, RightSide, RightSideCompact, RightSideCompactInLine, RightSideInLine \r\n- HamburgerButtonAnimation:__enum__  \r\nvalues:  No, ToArrow, ToVertical\r\n- IsPaneOpeend:__bool__ - Get or set the value of panel (and open and close it)\r\n- IsSwipeOpenEnabled:__bool__ - Get or set the value of \"open with swipe\" feature\r\n- IsHamburgerButtonAnimationEnabled:__bool__ - Get or set the value for the \"hamburger button animation feature\"\r\n- BarBackgroundColor:__Brush__ - The top bar background\r\n- BarContent:__UIElement__ - The content of the top bar\r\n- HamburgerForeground:__Brush__ - The hamburger button foreground\r\n- HamburgerBackground:__Color__ - The hamburger button background color\r\n- HamburgerBackgroundPressed:__Color__ - The hamburger button background color when pressed\r\n- PaneBackground:__Brush__ - The panel background\r\n- PaneContent:__UIElement__ - The panel content\r\n- ContentBackground:__Brush__ - The main content background\r\n- OpenedPaneLength:__double__ - The size of opened panel\r\n- Content:__UIElement__ - The main content\r\n\r\n###Events\r\n- HamburgerTapped:__TappedEventHandler__ - Fired when hamburger button is tapped (not with swipe)\r\n- PaneClosed:__TypedEventHandler<SplitView,Object>__ - Fired when panel is closed\r\n- PaneClosing:__TypedEventHandler<SplitView,Object>__ - Fired when panel is closing\r\n\r\n###Methods\r\nThere aren't public methods\r\n\r\n###Example\r\n```xaml\r\n<dc:DewHamburgerMenu x:Name=\"MainMenu\"  \r\n    BarBackgroundColor=\"Transparent\"   \r\n    ContentBackground=\"Transparent\"   \r\n    PaneBackground=\"Transparent\"   \r\n    HamburgerType=\"LeftSideCompact\">    \r\n    <dc:DewHamburgerMenu.PaneContent>  \r\n            <!-- pane stuff -->  \r\n    </dc:DewHamburgerMenu.PaneContent>  \r\n    <dc:DewHamburgerMenu.BarContent>  \r\n            <TextBlock Text=\"\" x:Name=\"HamburgerTitle\" FontSize=\"28\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" Foreground=\"WhiteSmoke\" Margin=\"0,0,30,0\"/>  \r\n    </dc:DewHamburgerMenu.BarContent>  \r\n    <dc:DewHamburgerMenu.Content>  \r\n        <Grid>  \r\n            <Frame x:Name=\"PageFrame\"  /> \r\n        </Grid>  \r\n    </dc:DewHamburgerMenu.Content>  \r\n</dc:DewHamburgerMenu>\r\n```\r\n###Some screen\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160809_0002.png\" width=\"200\"/>\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160809_0001.png\" width=\"200\"/>\r\n\r\n\r\n##Toast popup\r\nThe toast popup is really cute and you can use it to give a feedback to the user about an operation, or obviously, whatever you want.\r\n\r\n##Properties\r\n- MessageFontFamily:__FontFamily__ - The font family for text in the toast  \r\n- MessageFontSize:__double__ - The font size in the toast\r\n- CornerRadius:__CornerRadius__ - The toast corners\r\n- Background:__Brush__ - Toast background\r\n- MessageForeground:__Brush__ - Toast text foreground\r\n- Message:__string__ - The popup text\r\n- IsVisible:__bool__ - Set or get the visibility property\r\n\r\n###Events\r\nThere aren't Events\r\n\r\n###Methods\r\n- ShowPopupMessageAsync(__string__:The toast message ,__int__:Time to popup hide (in ms, 0 = infinite),__int__: Animation time (in ms)):__Task__ (awaitable)\r\n- HidePopupMessageAsync(__int__: Animation time (in ms)):__Task__ (awaitable)\r\n\r\n###Example\r\nIn view xaml (note: the z-index is your discrection)\r\n```xaml\r\n <dc:DewToastPopup Margin=\"50\" Background=\"WhiteSmoke\" MessageFontSize=\"15\" VerticalAlignment=\"Bottom\" HorizontalAlignment=\"Center\" x:Name=\"Popup\" \r\n                          MessageForeground=\"Black\"/>\r\n```\r\nIn code behind\r\n```c#\r\nawait Popup.ShowPopupMessageAsync(\"example\", 2000);\r\n```\r\n###Some screen\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160809_0003.png\" width=\"200\"/>\r\n\r\n\r\n##Loader toast\r\nThis is a simple toast that contains a text and a loader ring. It's a simple way to show a loader with a message.\r\n\r\n#Properties\r\n- RingPosition:__enum__  \r\nvalues:Top, Bottom  \r\n- MessageFontFamily:__FontFamily__ - The font family for text in the toast  \r\n- MessageFontSize:__double__ - The font size in the toast\r\n- CornerRadius:__CornerRadius__ - The toast corners\r\n- MessageForeground:__Brush__ - Toast text foreground\r\n- Message:__string__ - The popup text\r\n- Background:__Brush__ - Toast background\r\n- IsRingEnabled:__bool__ - Set\\get the ring abilitation\r\n- IsRingActive:__bool__ - Set\\get the ring activation\r\n- IsVisible:__bool__ - Set or get the visibility property\r\n\r\n###Events\r\nThere aren't Events\r\n\r\n###Methods\r\n- ShowPopupLoaderAsync(__int__:the animation time):__Task__ (awaitable)\r\n- ShowPopupLoaderAsync(__string__:The message, __int__:the animation time):__Task__ (awaitable)\r\n- HidePopupLoaderAsync(__int__:the animation time):__Task__ (awaitable)\r\n\r\n###Example\r\nIn view xaml (note: the z-index is your discrection)\r\n```xaml\r\n <dc:DewLoader Margin=\"50\" Background=\"WhiteSmoke\" MessageFontSize=\"15\" VerticalAlignment=\"Bottom\" HorizontalAlignment=\"Center\" x:Name=\"Loader\" \r\n                          MessageForeground=\"Black\"/>\r\n```\r\nIn code behind\r\n```c#\r\nawait Loader.ShowPopupLoaderAsync(\"example\", 2000);\r\n```\r\n\r\n##Dialog Window\r\nHere we have a simple dialog control. You can customize it however you want.\r\nThe buttons must be defined in the buttons style properties\r\n\r\n###Properties\r\n- DewDialogType:__enum__  \r\nvalues: OnlyTopBar (no buttons are showed), TopBarWithButtons (complete dialog window), TopBarAcceptButton (top bar with only right button), Nothing (only content)\r\n- DialogTitle:__string__ - Set\\get the top bar text\r\n- CloseGlyphForeground:__SolidColorBrush__ - The X button foreground\r\n- TopBarBackground:__Brush__ - The top bar background\r\n- TopBarForeground:__SolidColorBrush__ - The top bar foreground\r\n- ContentBackground:__Brush__ - The content background\r\n- Content:__UIElement__ - The content's content ( :| )\r\n- ButtonAreaBackground:__Brush__ - The button area background\r\n- LeftButtonStyle:__Style__ - Define the content and the button's style\r\n- RightButtonStyle:__Style__ - Define the content and the button's style\r\n- IsVisible:__bool__ - Set\\get the control's visibility\r\n- IsTopBarVisible:__bool__ - Set\\get the top bar visibility\r\n- IsButtonAreaVisibile:__bool__ - Set\\get the buttons bar visibility\r\n- IsLeftButtonVisible:__bool__ - Set\\get the left button visibility\r\n\r\n###Events\r\n- LeftButtonTapped:__TappedEventHandler(object: Content,TappedRoutedEventArgs)__\r\n- RightButtonTapped:__TappedEventHandler(object: Content ,TappedRoutedEventArgs)__\r\n- CloseButtonTapped:__TappedEventHandler(object: Content ,TappedRoutedEventArgs)__\r\n- DialogOpening: __OpenEventHandler(object: Content)__\r\n\r\n###Methods\r\n- ShowDialogAsync(__int__:the animation time):__Task__ (awaitable)\r\n- HideDialogAsync(__int__:the animation time):__Task__ (awaitable)\r\n\r\n###Example\r\nIn view xaml (note: the z-index is your discrection)\r\n```xaml\r\n <dc:DewDialog DialogType=\"TopBarWithButtons\" x:Name=\"Dialog\" ContentBackground=\"#cc000000\" TopBarBackground=\"Transparent\" \r\n                          ButtonAreaBackground=\"Transparent\" DialogOpening=\"Dialog_DialogOpening\"\r\n                      RightButtonTapped=\"Dialog_RightButtonTapped\"\r\n                          LeftButtonTapped=\"Dialog_LeftButtonTapped\"\r\n                      CloseGlyphForeground=\"White\" IsVisible=\"False\">\r\n              <!-- content stuff -->\r\n\r\n                <dc:DewDialog.RightButtonStyle>\r\n                    <Style TargetType=\"Button\" BasedOn=\"{StaticResource UWButtonLayer}\">\r\n                        <Setter Property=\"Content\">\r\n                            <Setter.Value>\r\n                                <TextBlock Text=\"\" x:Uid=\"CreateCollectionButton\"></TextBlock>\r\n                            </Setter.Value>\r\n                        </Setter>\r\n                    </Style>\r\n                </dc:DewDialog.RightButtonStyle>\r\n                <dc:DewDialog.LeftButtonStyle>\r\n                    <Style TargetType=\"Button\" BasedOn=\"{StaticResource UWButtonLayer}\">\r\n                        <Setter Property=\"Content\">\r\n                            <Setter.Value>\r\n                                <TextBlock Text=\"\" x:Uid=\"CancelButton\"></TextBlock>\r\n                            </Setter.Value>\r\n                        </Setter>\r\n                    </Style>\r\n                </dc:DewDialog.LeftButtonStyle>\r\n            </dc:DewDialog>\r\n```\r\nIn code behind\r\n```c#\r\nawait Loader.ShowDialogAsync(500);\r\n```\r\n\r\n###Some screen\r\n<img src=\"http://andrewdev.eu/wp-content/uploads/2016/08/wp_ss_20160809_0004.png\" width=\"200\"/>\r\n\r\n\r\n##Other sources\r\n\r\n###Nuget\r\nYou can find controls on [nuget](https://www.nuget.org/packages/DewUserControls/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}